import React from 'react';

import { firebaseAuth, firebaseStore, firebaseStrg } from '../../../firebaseConfig';
import { getDownloadURL, listAll, ref, uploadString } from 'firebase/storage';
import { setDoc, doc, getDoc, updateDoc, getDocs, collection, arrayUnion, deleteDoc, getDocFromServer, serverTimestamp, onSnapshot } from 'firebase/firestore';
import { v4 as uuidv4 } from 'uuid';
import { FriendList, RequestFriend, UserInfo } from '../../../msg_typeDef';
import { get } from 'firebase/database';

const userAuth = firebaseAuth;

/**
 * Get Current User Info in Document
 * 
 */
export const setInitUserInfo = async() => {
    if(userAuth.currentUser) {
        const docRef = doc(firebaseStore,'userInfo',userAuth.currentUser.email)
        try {
            await setDoc(docRef, {
                uid : userAuth.currentUser.uid,
                email : userAuth.currentUser.email,
                emailVerified : userAuth.currentUser.emailVerified,
                displayName : userAuth.currentUser.displayName,
                photoURL : userAuth.currentUser.photoURL,
                lastLogin : new Date()
            }, { merge : true })
            return true
        } catch(error) {
            return false
        }
    } else {
        console.log("Not Logined")
        return false
    }
}

/**
 * Get All User List In Document
 * @return result - true or false depending on whether the request succeeds or not
 * @return value - Array of User List
 */
export const getAllUserInDoc = async()=> {
    let userList = []
    try {
        await getDocs(collection(firebaseStore,"userInfo"))
            .then((response)=> {
                response.forEach((docs)=> {
                    {docs.data().email !== userAuth.currentUser.email 
                        && userList.push(docs.data())}  
                })
            })
        console.log(userList)
        return { result : true, value : userList}
        
    } catch(error) {
        return {result :false, value : []}
    }
}

export const getUserInfo = async(email: string) => {
    const docRef = doc(firebaseStore,'userInfo',email);
    try { 
        const response = await getDoc(docRef);
        const docData = response.data() 
        const reNewDate : Date = docData.lastLogin.toDate()
        const resultValue = docData as UserInfo
        resultValue.lastLogin = reNewDate.toString()
        return { result : true, value : resultValue}
        
    } catch(error) {
        console.log(error)
        return { result : false, value : null}
    }
}
/**
 * Upload Image File's String Value to Firebase Storage
 * @param fileString upload Image File generated by `FileReader()`
 * @return `Object` result : boolean, value : optional
 */
export const uploadPhotoToStrg = async(fileString : string) => {
    const storageRef = ref(firebaseStrg,`userInfo/${userAuth.currentUser.email}/photoURL`);
    try {
        await uploadString(storageRef,fileString,"data_url")    
        return {result : true, value : storageRef}
    } catch(error) {
        console.log(error)
        return {result : false, value : null}
    } 
}

export const updatePhotoURL = async(url : string)=> {
    const docRef = doc(firebaseStore,'userInfo',userAuth.currentUser.email);
    try {
        await updateDoc(docRef, { photoURL : url });
        return true;
    } catch(error) {
        return false;
    } 
}

export const getUserListInStrg = async()=> {
    const storageRef = ref(firebaseStrg, 'userInfo');    
    let userList = []
    try {
        await listAll(storageRef)
            .then((response)=> {
                response.prefixes.map((item : any)=> {
                    const mailString = item._location.path_.split('/')[1];
                    userList.push(mailString);
                })
            })
        return { result : true, value : userList }
    } catch(error){
        return { result : false, value : null}
    }
}
export const getUserInfoInStrg = async(email : string)=> {
    const storageRef = ref(firebaseStrg,`userInfo/${email}/photoURL`)
    try {
        const downURL = await getDownloadURL(storageRef)
        return {result : true, value : downURL}
    } catch(error) {
        return {result : false, value : ""}
    }
    
}

/**
 * Send a friend request to the selected user
 * @param {string} email Who will receive friend requests
 * @return result : boolean, value : message
 */
export const setRequestAddFriendInDoc = async(email : string) => {
    const requestUUID = uuidv4()
    try {
        await setDoc(doc(firebaseStore,'friendReq', requestUUID), {
            UUID : requestUUID,
            from : userAuth.currentUser.email,
            to : email,
            checkYn : false,
            status : "request",
            req_date : new Date(),
        })
        return { result : true, value : "Request Success"}
    } catch (error) {
        return { result : false, value : `Error : ${error}`}
    }
}
/**
 * Move a friend request to request history,
 * and delete request in friendReq
 * 
 * Note : This function is related to `setRequestAddFriendInDoc()`
 * @param {Interface} friendRequest Object of Friend request Information
 * @return {Boolean} success : true / fail : false
 */
export const delAddFriendRequestInDoc = async(friendRequest : RequestFriend | null) => {
    try {
        if(friendRequest !== null ){
            await setDoc(doc(firebaseStore, 'reqHistory',friendRequest.UUID),{
                UUID : friendRequest.UUID,
                from : friendRequest.from,
                to : friendRequest.to,
                status : friendRequest.status,
                req_date : friendRequest.req_date,
            }).then(()=> {
                deleteDoc(doc(firebaseStore,'friendReq',friendRequest.UUID))
            })
            return true
        } else {
            return false
        }
    } catch(error) {
        console.log(error)
        return false
    }
}

/**
 * View the full list of friend add requests
 * 
 * Note : View the full list for reuse in other components. 
 * @returns result : `Boolean`, value : `Array` of request List
 */
export const getReuestAddFriendInDoc = async()=> {
    let docList = []
    try {
        await getDocs(collection(firebaseStore,'friendReq'))
            .then((response)=> {
                response.forEach((doc)=>
                    docList.push(doc.data())
                )
            })
            return {result : true, value : docList}
    }catch (error) {
        console.log(`Error : ${error}`)
        return {result : false, value : []};
    }
}

/**
 * Runs when a friend request is accepted or declined
 * @param {RequestFriend} request friend request Information Object
 * @param {boolean} acceptYn accept:`true`, decline:`false`
 * 
 */
export const setFriendRequestControl = async (request : RequestFriend, acceptYn : boolean) => {
    try {
        if(acceptYn) {
            const requestUUID = uuidv4()
            await setDoc(doc(firebaseStore, 'friendList',requestUUID), {
                UUID : requestUUID,
                friendEmail : [firebaseAuth.currentUser.email, request.from],
                acceptDate : new Date(),
                chatUUID : ""
            })
            await updateDoc(doc(firebaseStore,'userInfo',firebaseAuth.currentUser.email),{
                friendList : arrayUnion(requestUUID)
            })
            await updateDoc(doc(firebaseStore,'userInfo',request.from),{
                friendList : arrayUnion(requestUUID)
            })
            await updateDoc(doc(firebaseStore,'friendReq',request.UUID),{
                status : "success"
            })
        } else {
            await updateDoc(doc(firebaseStore, 'friendReq', request.UUID),{
                status : "refusal"
            })
        }
        return true
    } catch(error){
        console.log(new Error(`Request Error : ${error}`))
        return false
    }
}

export const getFriendInDoc = async() => {
    let data = [];
    const docRef = doc(firebaseStore,'userInfo',firebaseAuth.currentUser.email)
    try {
        const response = await getDoc(docRef)
        return {result : true, value : response.data()}
    } catch(error) {
        console.log(error)
        return {result : false, value : null}
    }
}
/**
 * Get the email address of the member based on the UUID of the friendList Collection.
 * 
 * @param uuid Unique ID in collection of 'friendList'
 * @returns result : `Boolean` value : the other User Email
 */
export const getInfoInFriendListCol = async(uuid : string) => {
    const currentUser = firebaseAuth.currentUser.email;
    const docRef = doc(firebaseStore,'friendList',uuid);
    try {
        const response = (await getDoc(docRef)).data() as FriendList;
        const otherUser = response.friendEmail.filter((item)=> item !== currentUser)[0];
        return {result : true, value : otherUser}
    } catch(error) {
        console.log(error);
        return { result : false, value : null}
    }
}

/**
 * Returns the UUID value of the chat room created with the selected friend
 * 
 * Note :  If the chatUUID does not exist, function will be created and returned
 * @param uuid Unique ID in Collection 'friendList'
 * @return {string} value of chatUUID
 * 
 */
export const getChatInfoInFriendList = async(uuid : string) => {    
    const docRef = doc(firebaseStore,'friendList',uuid);
    try {
        const response = (await getDoc(docRef)).data() as FriendList
        let chatUUID = ""
        if(response.chatUUID.length === 0) {
            const uuid = uuidv4();
            await setDoc(doc(firebaseStore,'chatList',uuid),{
                uuid : uuid,
                friendListUUID : response.UUID,
                members : response.friendEmail,
                lastChat : new Date()
            })
            await updateDoc(docRef,{ chatUUID : uuid}).then(()=>{
                chatUUID = uuid
            })
        } else {
            chatUUID = response.chatUUID
        }
        return { chatRoomId : chatUUID }
    } catch(error) {
        console.log(error)
        return { chatRoomId : null }
    }
}
export const getChatCollection = async(uuid : string) => {
    const colRef = collection(firebaseStore,`chatList/${uuid}/messages`)
    await getDocs(colRef).then((result)=> {
        console.log(result)
        /* create Snapshot */
    })
}